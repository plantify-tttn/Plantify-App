import 'dart:convert';
import 'dart:io';
import 'package:flutter/material.dart';
import 'package:flutter_dotenv/flutter_dotenv.dart';
import 'package:hive/hive.dart';
import 'package:http/http.dart' as http;
import 'package:path/path.dart' as p;
import 'package:plantify/models/user_model.dart';

class UserService {
  final String baseUrl = dotenv.env['BASE_URL'] ?? "";

  /// L·∫•y th√¥ng tin ng∆∞·ªùi d√πng theo ID
  Future<UserModel> getUserById(String id) async {
    final box = Hive.box<UserModel>('userBox');
    for (final key in box.keys) { 
      final user = box.get(key); 
      debugPrint('üîπ [$key] ${user?.name} | ${user?.email} | ${user?.id}'); 
    }
    try {
      final user = hiveGetUserById(id);

      if (user == null) {
        throw Exception('‚ùå Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng v·ªõi id: $id');
      }

      return user;
    } catch (e, stackTrace) {
      debugPrint('‚ùå [getUserById] L·ªói khi l·∫•y user v·ªõi id: $id');
      debugPrint('üîç L·ªói: $e');
      debugPrint('üìå StackTrace: $stackTrace');
      return UserModel.empty();
    }
  }

  /// L·∫•y danh s√°ch t·∫•t c·∫£ ng∆∞·ªùi d√πng
  Future<List<UserModel>> getAllUsers() async {
    final url = Uri.parse('$baseUrl/auth/all-users');
    final response = await http.get(url);

    if (response.statusCode == 200) {
      final decoded = jsonDecode(utf8.decode(response.bodyBytes));
      final List list =
          decoded is List ? decoded : (decoded['users'] as List? ?? const []);
          return list
              .map((e) => UserModel.fromJson(e as Map<String, dynamic>))
              .toList();
    } else {
      throw Exception('L·ªói khi l·∫•y danh s√°ch ng∆∞·ªùi d√πng');
    }
  }

  /// C·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng
  Future<void> updateUser(UserModel user) async {
    final url = Uri.parse('$baseUrl/users/${user.id}');
    final response = await http.put(
      url,
      headers: {'Content-Type': 'application/json'},
      body: jsonEncode(user.toJson()),
    );

    if (response.statusCode != 200) {
      throw Exception('C·∫≠p nh·∫≠t th·∫•t b·∫°i');
    }
  }

  /// Xo√° ng∆∞·ªùi d√πng
  Future<void> deleteUser(String id) async {
    final url = Uri.parse('$baseUrl/users/$id');
    final response = await http.delete(url);

    if (response.statusCode != 200) {
      throw Exception('Xo√° th·∫•t b·∫°i');
    }
  }

  Future<String> uploadAvatar(File file, {String? token}) async {
    final uri = Uri.parse('$baseUrl/files/upload'); // ƒë·ªïi endpoint theo BE c·ªßa b·∫°n
    final req = http.MultipartRequest('POST', uri)
      ..files.add(await http.MultipartFile.fromPath(
        'avatar', // ƒë·ªïi 'avatar' ƒë√∫ng t√™n field file tr√™n BE
        file.path,
        filename: p.basename(file.path),
      ));

    final t = token ?? UserService.getToken();
    if (t.isNotEmpty) {
      req.headers['Authorization'] = 'Bearer $t';
    }

    final res = await req.send();
    final body = await res.stream.bytesToString();
    if (res.statusCode != 200 && res.statusCode != 201) {
      throw Exception('Upload avatar th·∫•t b·∫°i (${res.statusCode}): $body');
    }
    final json = jsonDecode(body) as Map<String, dynamic>;
    // BE c·ªßa b·∫°n tr·∫£ key n√†o th√¨ l·∫•y key ƒë√≥ (v√≠ d·ª• 'url' ho·∫∑c 'imageUrl')
    return (json['url'] ?? json['imageUrl'] ?? '').toString();
  }

  /// C·∫≠p nh·∫≠t profile (kh√¥ng g·ª≠i accessToken trong body)
  Future<UserModel> updateProfile({
    required String id,
    required String name,
    required String email,
    required String imageUrl,
    String? token,
  }) async {
    final url = Uri.parse('$baseUrl/user/upload/$id');
    final t = token ?? UserService.getToken();

    final response = await http.put(
      url,
      headers: {
        'Content-Type': 'application/json',
        'Authorization': 'Bearer $t',
      },
      body: jsonEncode({
        'name': name,
        'email': email,
        'imageUrl': imageUrl,
      }),
    );

    if (response.statusCode != 201 && response.statusCode != 200) {
      throw Exception('C·∫≠p nh·∫≠t th·∫•t b·∫°i: ${response.statusCode} ${response.body}');
    }

    final data = jsonDecode(response.body);
    // tu·ª≥ BE tr·∫£ v·ªÅ { user: {...} } hay tr·∫£ th·∫≥ng user
    final userJson = Map<String, dynamic>.from(data['user'] ?? data);
    final user = UserModel.fromJson(userJson);

    await UserService.hiveUpsertUserPartial(
      id: user.id,
      name: user.name,
      imageUrl: user.imageUrl,
      email: user.email,
      accessToken: t, // l∆∞u token m·ªõi n·∫øu c√≥
    ); // ƒë·ªìng b·ªô l·∫°i Hive
    return user;
  }

  /// One-shot: n·∫øu c√≥ ch·ªçn ·∫£nh m·ªõi -> upload, r·ªìi update profile
  Future<UserModel> updateProfileWithOptionalAvatar({
    required UserModel current,
    required String name,
    required String email,
    File? newAvatar,
  }) async {
    String imageUrl = current.imageUrl;

    if (newAvatar != null) {
      imageUrl = await uploadAvatar(newAvatar); // s·∫Ω t·ª± l·∫•y token t·ª´ Hive
    }

    return await updateProfile(
      id: current.id,
      name: name,
      email: email,
      imageUrl: imageUrl,
    );
  }




  static const String _boxName = 'userBox';
  static const String _userKey = 'currentUser';

  // ‚úÖ L∆∞u user
  static Future<void> hiveSaveUser(UserModel user) async {
    final box = Hive.box<UserModel>(_boxName);
    await box.put(_userKey, user);
  }

  static Future<void> hiveSaveAllUser(UserModel user) async {
    final box = Hive.box<UserModel>(_boxName);
    await box.put(user.id.toString(), user);
  }


  static Future<void> hiveSaveUserById(UserModel user) async {
    final box = Hive.box<UserModel>('userBox');
    await box.put(user.id, user); // key l√† user.id
  }

  // ‚úÖ L·∫•y user
  static UserModel? hiveGetUser() {
    final box = Hive.box<UserModel>(_boxName);
    return box.get(_userKey);
  }
  static UserModel? hiveGetUserById(String userId) {
    final box = Hive.box<UserModel>('userBox');
    try {
      return box.get(userId); // l·∫•y theo key userId
    } catch (e) {
      debugPrint('‚ùå L·ªói khi t√¨m user trong Hive: $e');
      return null;
    }
  }

  // ‚úÖ Xo√° user khi logout
  static Future<void> hiveDeleteUser() async {
    final box = Hive.box<UserModel>(_boxName);
    await box.delete(_userKey);
  }

  // ‚úÖ Ki·ªÉm tra ƒë√£ login ch∆∞a
  static bool isLoggedIn() {
    final box = Hive.box<UserModel>(_boxName);
    return box.containsKey(_userKey);
  }

  static String getToken() {
    final box = Hive.box<UserModel>(_boxName);
    final user = box.get(_userKey);
    
    if (user != null && user.accessToken.isNotEmpty) {
      return user.accessToken;
    } else {
      throw Exception('Token not found in Hive');
    }
  }

  static Future<void> hiveUpsertUserPartial({
    String? id,
    String? name,
    String? imageUrl,
    String? email,
    String? accessToken, // c√≥ th·ªÉ null n·∫øu BE kh√¥ng tr·∫£
  }) async {
    final box = Hive.box<UserModel>(_boxName);
    final current = box.get(_userKey);

    if (current == null) {
      // Ch∆∞a c√≥ -> t·∫°o m·ªõi, nh∆∞ng c·∫ßn ƒë·∫£m b·∫£o non-null (d√πng fallback)
      final newUser = UserModel(
        id: id ?? '',
        name: (name?.trim().isNotEmpty == true) ? name! : 'No name',
        imageUrl: (imageUrl?.trim().isNotEmpty == true)
            ? imageUrl!
            : 'https://cdn-icons-png.flaticon.com/512/8792/8792047.png',
        email: email ?? '',
        accessToken: accessToken ?? '', // fallback r·ªóng
      );
      await box.put(_userKey, newUser);
      return;
    }

    // ƒê√£ c√≥ -> merge: ch·ªâ c·∫≠p nh·∫≠t khi gi√° tr·ªã m·ªõi KH√ÅC null & KH√îNG r·ªóng
    final merged = current.copyWith(
      id: (id != null && id.isNotEmpty) ? id : current.id,
      name: (name != null && name.trim().isNotEmpty) ? name : current.name,
      imageUrl: (imageUrl != null && imageUrl.trim().isNotEmpty)
          ? imageUrl
          : current.imageUrl,
      email: (email != null && email.trim().isNotEmpty) ? email : current.email,
      accessToken: (accessToken != null && accessToken.isNotEmpty)
          ? accessToken
          : current.accessToken,
    );

    await box.put(_userKey, merged);
  }
}
