import 'dart:convert';
import 'dart:io';
import 'package:flutter/material.dart';
import 'package:flutter_dotenv/flutter_dotenv.dart';
import 'package:hive/hive.dart';
import 'package:http/http.dart' as http;
import 'package:path/path.dart' as p;
import 'package:plantify/models/user_model.dart';

class UserService {
  final String baseUrl = dotenv.env['BASE_URL'] ?? "";
  String? get _tokenOrNull {
  final u = Hive.box<UserModel>('userBox').get('currentUser');
  final t = u?.accessToken ?? '';
  return t.isNotEmpty ? t : null;
}

  /// L·∫•y th√¥ng tin ng∆∞·ªùi d√πng theo ID
  Future<UserModel> getUserById(String id) async {
    final box = Hive.box<UserModel>('userBox');
    for (final key in box.keys) {
      final user = box.get(key);
      debugPrint('üîπ [$key] ${user?.name} | ${user?.email} | ${user?.id}');
    }
    try {
      final user = hiveGetUserById(id);

      if (user == null) {
        throw Exception('‚ùå Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng v·ªõi id: $id');
      }

      return user;
    } catch (e, stackTrace) {
      debugPrint('‚ùå [getUserById] L·ªói khi l·∫•y user v·ªõi id: $id');
      debugPrint('üîç L·ªói: $e');
      debugPrint('üìå StackTrace: $stackTrace');
      return UserModel.empty();
    }
  }

  Future<String> getEmailByToken(String token) async {
    final url = Uri.parse('$baseUrl/auth/profile');
    final response = await http.get(
      url,
      headers: {
        'Content-Type': 'application/json',
        'Authorization': 'Bearer $token',
      },
    );
    if (response.statusCode != 201 && response.statusCode != 200) {
      throw Exception(
          'C·∫≠p nh·∫≠t th·∫•t b·∫°i: ${response.statusCode} ${response.body}');
    }

    final data = jsonDecode(response.body);
    return data['email'];
  }
  Future<String> getImagesByToken() async{
    final t = _tokenOrNull;
    if (t == null) throw Exception('Missing token');
    final url = Uri.parse('$baseUrl/auth/profile');
    final response = await http.get(
      url,
      headers: {
        'Content-Type': 'application/json',
        'Authorization': 'Bearer $t',
      },
    );
    if (response.statusCode != 201 && response.statusCode != 200) {
      throw Exception(
          'C·∫≠p nh·∫≠t th·∫•t b·∫°i: ${response.statusCode} ${response.body}');
    }

    final data = jsonDecode(response.body);
    return data['imageurl'];
  }

  /// L·∫•y danh s√°ch t·∫•t c·∫£ ng∆∞·ªùi d√πng
  Future<List<UserModel>> getAllUsers() async {
    final url = Uri.parse('$baseUrl/auth/all-users');
    final response = await http.get(url);

    if (response.statusCode == 200) {
      final decoded = jsonDecode(utf8.decode(response.bodyBytes));
      final List list =
          decoded is List ? decoded : (decoded['users'] as List? ?? const []);
      return list
          .map((e) => UserModel.fromJson(e as Map<String, dynamic>))
          .toList();
    } else {
      throw Exception('L·ªói khi l·∫•y danh s√°ch ng∆∞·ªùi d√πng');
    }
  }

  /// C·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng
  Future<void> updateUser(UserModel user) async {
    final url = Uri.parse('$baseUrl/users/${user.id}');
    final response = await http.put(
      url,
      headers: {'Content-Type': 'application/json'},
      body: jsonEncode(user.toJson()),
    );

    if (response.statusCode != 200) {
      throw Exception('C·∫≠p nh·∫≠t th·∫•t b·∫°i');
    }
  }

  /// Xo√° ng∆∞·ªùi d√πng
  Future<void> deleteUser(String id) async {
    final url = Uri.parse('$baseUrl/users/$id');
    final response = await http.delete(url);

    if (response.statusCode != 200) {
      throw Exception('Xo√° th·∫•t b·∫°i');
    }
  }

  /// C·∫≠p nh·∫≠t profile (kh√¥ng g·ª≠i accessToken trong body)
  Future<UserModel> updateProfile({
    required String token,
    String? name,
    String? email,
    File? file,
  }) async {
    final url = Uri.parse('$baseUrl/auth/update-profile');
    http.Response res;

    if (file != null) {
      // ===== Multipart (c√≥ file) =====
      final req = http.MultipartRequest('PUT', url);

      if (name != null && name.isNotEmpty) req.fields['name'] = name;
      if (email != null && email.isNotEmpty) req.fields['email'] = email;

      // T√™n field file ƒë·ªïi cho ƒë√∫ng v·ªõi BE (vd: 'avatar' / 'image' / 'file')
      req.files.add(
        await http.MultipartFile.fromPath(
          'image',
          file.path,
          filename: p.basename(file.path),
        ),
      );

      req.headers['Authorization'] = 'Bearer $token';
      req.headers['Accept'] = 'application/json';

      final streamed = await req.send();
      res = await http.Response.fromStream(streamed);
    } else {
      // ===== JSON (kh√¥ng c√≥ file) =====
      final body = <String, dynamic>{};
      if (name != null && name.isNotEmpty) body['name'] = name;
      if (email != null && email.isNotEmpty) body['email'] = email;

      res = await http.put(
        url,
        headers: {
          'Content-Type': 'application/json',
          'Authorization': 'Bearer $token',
          'Accept': 'application/json',
        },
        body: jsonEncode(body),
      );
    }

    if (res.statusCode != 200 && res.statusCode != 201) {
      throw Exception('C·∫≠p nh·∫≠t th·∫•t b·∫°i: ${res.statusCode} ${res.body}');
    }
    if (res.statusCode == 200 || res.statusCode == 201){
      final imageUrl = await getImagesByToken();
      await hiveUpsertUserPartial(
        name: name,
        imageUrl: imageUrl,
        email: email,
        accessToken: token, // l∆∞u token m·ªõi n·∫øu c√≥
      ); // ƒë·ªìng b·ªô l·∫°i Hive
    }
    final user = hiveGetUser();
    return user!;
  }

  /// One-shot: n·∫øu c√≥ ch·ªçn ·∫£nh m·ªõi -> upload, r·ªìi update profile
  Future<UserModel> updateProfileWithOptionalAvatar({
    String? name,
    String? email,
    File? newAvatar,
  }) async {
    final t = _tokenOrNull;
  if (t == null) throw Exception('Missing token');
    return await updateProfile(
      token: t,
      name: name,
      email: email,
      file: newAvatar,
    );
  }

  static const String _boxName = 'userBox';
  static const String _userKey = 'currentUser';

  // ‚úÖ L∆∞u user
  static Future<void> hiveSaveUser(UserModel user) async {
    final box = Hive.box<UserModel>(_boxName);
    await box.put(_userKey, user);
  }

  static Future<void> hiveSaveAllUser(UserModel user) async {
    final box = Hive.box<UserModel>(_boxName);
    await box.put(user.id.toString(), user);
  }

  static Future<void> hiveSaveUserById(UserModel user) async {
    final box = Hive.box<UserModel>('userBox');
    await box.put(user.id, user); // key l√† user.id
  }

  // ‚úÖ L·∫•y user
  static UserModel? hiveGetUser() {
    final box = Hive.box<UserModel>(_boxName);
    return box.get(_userKey);
  }

  static UserModel? hiveGetUserById(String userId) {
    final box = Hive.box<UserModel>('userBox');
    try {
      return box.get(userId); // l·∫•y theo key userId
    } catch (e) {
      debugPrint('‚ùå L·ªói khi t√¨m user trong Hive: $e');
      return null;
    }
  }

  // ‚úÖ Xo√° user khi logout
  static Future<void> hiveDeleteUser() async {
    final box = Hive.box<UserModel>(_boxName);
    await box.delete(_userKey);
  }

  // ‚úÖ Ki·ªÉm tra ƒë√£ login ch∆∞a
  static bool isLoggedIn() {
    final box = Hive.box<UserModel>(_boxName);
    return box.containsKey(_userKey);
  }

  static String getToken() {
    final box = Hive.box<UserModel>(_boxName);
    final user = box.get(_userKey);

    if (user != null && user.accessToken.isNotEmpty) {
      return user.accessToken;
    } else {
      throw Exception('Token not found in Hive');
    }
  }

  static Future<void> hiveUpsertUserPartial({
    String? id,
    String? name,
    String? imageUrl,
    String? email,
    String? accessToken, // c√≥ th·ªÉ null n·∫øu BE kh√¥ng tr·∫£
  }) async {
    final box = Hive.box<UserModel>(_boxName);
    final current = box.get(_userKey);

    if (current == null) {
      // Ch∆∞a c√≥ -> t·∫°o m·ªõi, nh∆∞ng c·∫ßn ƒë·∫£m b·∫£o non-null (d√πng fallback)
      final newUser = UserModel(
        id: id ?? '',
        name: (name?.trim().isNotEmpty == true) ? name! : 'No name',
        imageUrl: (imageUrl?.trim().isNotEmpty == true)
            ? imageUrl!
            : 'https://cdn-icons-png.flaticon.com/512/8792/8792047.png',
        email: email ?? '',
        accessToken: accessToken ?? '', // fallback r·ªóng
      );
      await box.put(_userKey, newUser);
      return;
    }

    // ƒê√£ c√≥ -> merge: ch·ªâ c·∫≠p nh·∫≠t khi gi√° tr·ªã m·ªõi KH√ÅC null & KH√îNG r·ªóng
    final merged = current.copyWith(
      id: (id != null && id.isNotEmpty) ? id : current.id,
      name: (name != null && name.trim().isNotEmpty) ? name : current.name,
      imageUrl: (imageUrl != null && imageUrl.trim().isNotEmpty)
          ? imageUrl
          : current.imageUrl,
      email: (email != null && email.trim().isNotEmpty) ? email : current.email,
      accessToken: (accessToken != null && accessToken.isNotEmpty)
          ? accessToken
          : current.accessToken,
    );

    await box.put(_userKey, merged);
  }
}

class JwtUtil {
  static bool isExpired(String token) {
    try {
      final parts = token.split('.');
      if (parts.length != 3) return true; // token l·ªói coi nh∆∞ h·∫øt h·∫°n
      final payload = jsonDecode(
        utf8.decode(base64Url.decode(base64Url.normalize(parts[1]))),
      ) as Map<String, dynamic>;
      final exp = payload['exp'];
      if (exp is! int) return true;
      final expiresAt = DateTime.fromMillisecondsSinceEpoch(exp * 1000);
      return DateTime.now().isAfter(expiresAt);
    } catch (_) {
      return true; // parse l·ªói => coi nh∆∞ expired
    }
  }

  static final String _baseUrl = dotenv.env['BASE_URL'] ?? "";

  /// G·ªçi server x√°c th·ª±c token (ph√≤ng khi token b·ªã revoke d√π exp c√≤n s·ªëng)
  static Future<bool> validateRemote(String token) async {
    try {
      final res = await http.get(
        Uri.parse("$_baseUrl/auth/profile"),
        headers: {
          'Accept': 'application/json',
          'Authorization': 'Bearer $token',
        },
      );
      // 200/201 => h·ª£p l·ªá, 401/403 => h·∫øt h·∫°n/kh√¥ng h·ª£p l·ªá
      return res.statusCode >= 200 && res.statusCode < 300;
    } catch (_) {
      return false;
    }
  }
}