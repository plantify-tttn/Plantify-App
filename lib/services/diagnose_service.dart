import 'dart:async';
import 'dart:convert';
import 'dart:io';
import 'package:flutter_dotenv/flutter_dotenv.dart';
import 'package:http/http.dart' as http;

class DiagnoseService {
  DiagnoseService._internal();
  static final DiagnoseService _instance = DiagnoseService._internal();
  factory DiagnoseService() {
    return _instance;
  }
  final String baseUrl = dotenv.env['BASE_URL'] ?? "";

  Future<Map<String, dynamic>> sendText(String text, String token) async {
    final url = Uri.parse('$baseUrl/chatbot');

    try {
      final response = await http
          .post(
            url,
            headers: {
              'Content-Type': 'application/json',
              'Accept': 'application/json',
              // c·∫ßn cho ngrok
              'ngrok-skip-browser-warning': 'true',
              if (token.isNotEmpty) 'Authorization': 'Bearer $token',
            },
            body: jsonEncode({'message': text}),
          )
          .timeout(const Duration(seconds: 30));

      final isOk = response.statusCode == 201;

      // c·ªë g·∫Øng parse JSON, n·∫øu kh√¥ng ƒë∆∞·ª£c th√¨ tr·∫£ raw body
      Map<String, dynamic>? data;
      try {
        data = jsonDecode(response.body) as Map<String, dynamic>;
      } catch (_) {}

      if (isOk) {
        return {
          'success': true,
          'data': data ?? <String, dynamic>{'raw': response.body},
          // g·ªôp text hi·ªÉn th·ªã lu√¥n cho ti·ªán d√πng ·ªü UI (n·∫øu mu·ªën)
          'display': data == null ? response.body : formatChatbotReply(data),
        };
      } else {
        return {
          'success': false,
          'message': 'HTTP ${response.statusCode}: ${response.reasonPhrase}',
          'data': data ?? <String, dynamic>{'raw': response.body},
        };
      }
    } on SocketException catch (e) {
      return {'success': false, 'message': 'Kh√¥ng c√≥ k·∫øt n·ªëi m·∫°ng: $e'};
    } on HttpException catch (e) {
      return {'success': false, 'message': 'L·ªói HTTP: $e'};
    } on FormatException catch (_) {
      return {'success': false, 'message': 'Response kh√¥ng ph·∫£i JSON h·ª£p l·ªá'};
    } on TimeoutException {
      return {'success': false, 'message': 'Request qu√° th·ªùi gian ch·ªù'};
    } catch (e) {
      return {'success': false, 'message': 'L·ªói kh√¥ng x√°c ƒë·ªãnh: $e'};
    }
  }

  Future<Map<String, dynamic>> sendImage(
    File imageFile,
    String token,
  ) async {
    final url = Uri.parse('$baseUrl/upload/detect/diseases');

    try {
      final req = http.MultipartRequest('POST', url)
        ..headers.addAll({
          'Accept': 'application/json',
          'ngrok-skip-browser-warning': 'true',
          if (token.isNotEmpty) 'Authorization': 'Bearer $token',
        })
        ..files.add(await http.MultipartFile.fromPath('file', imageFile.path));

      final streamed = await req.send().timeout(const Duration(seconds: 60));
      final res = await http.Response.fromStream(streamed);

      final ok = res.statusCode == 200 || res.statusCode == 201;

      Map<String, dynamic>? data;
      try {
        data = jsonDecode(res.body) as Map<String, dynamic>;
      } catch (_) {
        data = {'raw': res.body};
      }

      if (ok) {
        return {
          'success': true,
          'data': data,
          'display': 'ƒê√¢y l√† b·ªánh ${data['result']} t√¨nh tr·∫°ng b·ªánh ${data['getDiseaseSeverity']} h√£y cho t√¥i bi·∫øt th√™m th√¥ng tin b·ªánh v√† c√°ch ch·ªØa',
        };
      } else {
        return {
          'success': false,
          'message': 'HTTP ${res.statusCode}: ${res.reasonPhrase}',
          'data': data,
        };
      }
    } catch (e) {
      return {'success': false, 'message': 'L·ªói: $e'};
    }
  }

  String formatChatbotReply(Map<String, dynamic> data) {
    final answer = data['answer']?.toString();
    final detail = data['detail']?.toString();
    final suggest = data['suggest']?.toString();
    final nextQ = data['next_question']?.toString();

    final buf = StringBuffer();
    if ((answer ?? '').isNotEmpty) buf.writeln('ü©∫ $answer');
    if ((detail ?? '').isNotEmpty) buf.writeln('‚Ä¢ Chi ti·∫øt: $detail');
    if ((suggest ?? '').isNotEmpty) buf.writeln('‚Ä¢ G·ª£i √Ω: $suggest');
    if ((nextQ ?? '').isNotEmpty) buf.writeln('ü§ñ $nextQ');

    return buf.isEmpty ? 'ƒê√£ nh·∫≠n ph·∫£n h·ªìi.' : buf.toString().trim();
  }
}
